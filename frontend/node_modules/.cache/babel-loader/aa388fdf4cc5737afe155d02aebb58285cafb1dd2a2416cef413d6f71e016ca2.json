{"ast":null,"code":"const fetchBookings = useCallback(async () => {\n  var _user;\n  if (loadingAuth || !((_user = user) !== null && _user !== void 0 && _user.email)) {\n    setIsLoadingBookings(false);\n    return;\n  }\n  setIsLoadingBookings(true);\n  setStatusMsg(\"\");\n  setStatusType(\"\"); // Clear status messages\n  try {\n    const token = localStorage.getItem(\"authToken\");\n    if (!token) {\n      throw new Error(\"Authentication token not found.\");\n    }\n    const response = await axios.get(`${API_URL}/api/booking/user-bookings?email=${user.email}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const allBookings = response.data;\n    const now = new Date(); // Current date and time\n\n    // Create today's date at midnight for comparison\n    const todayMidnight = new Date(now);\n    todayMidnight.setHours(0, 0, 0, 0);\n    const upcoming = [];\n    const past = [];\n    allBookings.forEach(booking => {\n      // Parse booking date and time\n      const bookingDate = new Date(`${booking.date}T${time24hrToIso(booking.time)}`);\n      if (isNaN(bookingDate.getTime())) {\n        console.warn(\"Invalid booking date encountered:\", booking);\n        past.push(booking); // Fallback to past if date is invalid\n        return;\n      }\n\n      // Compare booking date/time with current time\n      if (bookingDate >= now) {\n        upcoming.push(booking);\n      } else {\n        past.push(booking);\n      }\n    });\n\n    // Sort upcoming by earliest start time first\n    upcoming.sort((a, b) => {\n      const dateA = new Date(`${a.date}T${time24hrToIso(a.time)}`);\n      const dateB = new Date(`${b.date}T${time24hrToIso(b.time)}`);\n      if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) return 0;\n      return dateA.getTime() - dateB.getTime();\n    });\n\n    // Sort past by latest start time first\n    past.sort((a, b) => {\n      const dateA = new Date(`${a.date}T${time24hrToIso(a.time)}`);\n      const dateB = new Date(`${b.date}T${time24hrToIso(b.time)}`);\n      if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) return 0;\n      return dateB.getTime() - dateA.getTime();\n    });\n    setBookings(allBookings);\n    setUpcomingBookings(upcoming);\n    setPastBookings(past);\n    setStatusType(\"\");\n    setStatusMsg(\"\");\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"Failed to load bookings:\", error);\n    setStatusType(\"error\");\n    setStatusMsg(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to load bookings.\");\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n      logout();\n      navigate(\"/login\");\n    }\n  } finally {\n    setIsLoadingBookings(false);\n  }\n}, [user, loadingAuth, logout, navigate, time24hrToIso]);","map":{"version":3,"names":["fetchBookings","useCallback","_user","loadingAuth","user","email","setIsLoadingBookings","setStatusMsg","setStatusType","token","localStorage","getItem","Error","response","axios","get","API_URL","headers","Authorization","allBookings","data","now","Date","todayMidnight","setHours","upcoming","past","forEach","booking","bookingDate","date","time24hrToIso","time","isNaN","getTime","console","warn","push","sort","a","b","dateA","dateB","setBookings","setUpcomingBookings","setPastBookings","error","_error$response","_error$response$data","message","status","logout","navigate"],"sources":["C:/Users/ecah1/meeting-room-booking/frontend/src/pages/MyBookings.jsx"],"sourcesContent":["const fetchBookings = useCallback(async () => {\r\n  if (loadingAuth || !user?.email) {\r\n    setIsLoadingBookings(false);\r\n    return;\r\n  }\r\n  setIsLoadingBookings(true);\r\n  setStatusMsg(\"\");\r\n  setStatusType(\"\"); // Clear status messages\r\n  try {\r\n    const token = localStorage.getItem(\"authToken\");\r\n    if (!token) {\r\n      throw new Error(\"Authentication token not found.\");\r\n    }\r\n    const response = await axios.get(\r\n      `${API_URL}/api/booking/user-bookings?email=${user.email}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const allBookings = response.data;\r\n    const now = new Date(); // Current date and time\r\n    \r\n    // Create today's date at midnight for comparison\r\n    const todayMidnight = new Date(now);\r\n    todayMidnight.setHours(0, 0, 0, 0);\r\n\r\n    const upcoming = [];\r\n    const past = [];\r\n\r\n    allBookings.forEach((booking) => {\r\n      // Parse booking date and time\r\n      const bookingDate = new Date(`${booking.date}T${time24hrToIso(booking.time)}`);\r\n      \r\n      if (isNaN(bookingDate.getTime())) {\r\n        console.warn(\"Invalid booking date encountered:\", booking);\r\n        past.push(booking); // Fallback to past if date is invalid\r\n        return;\r\n      }\r\n\r\n      // Compare booking date/time with current time\r\n      if (bookingDate >= now) {\r\n        upcoming.push(booking);\r\n      } else {\r\n        past.push(booking);\r\n      }\r\n    });\r\n\r\n    // Sort upcoming by earliest start time first\r\n    upcoming.sort((a, b) => {\r\n      const dateA = new Date(`${a.date}T${time24hrToIso(a.time)}`);\r\n      const dateB = new Date(`${b.date}T${time24hrToIso(b.time)}`);\r\n      if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) return 0;\r\n      return dateA.getTime() - dateB.getTime();\r\n    });\r\n\r\n    // Sort past by latest start time first\r\n    past.sort((a, b) => {\r\n      const dateA = new Date(`${a.date}T${time24hrToIso(a.time)}`);\r\n      const dateB = new Date(`${b.date}T${time24hrToIso(b.time)}`);\r\n      if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) return 0;\r\n      return dateB.getTime() - dateA.getTime();\r\n    });\r\n\r\n    setBookings(allBookings);\r\n    setUpcomingBookings(upcoming);\r\n    setPastBookings(past);\r\n    setStatusType(\"\");\r\n    setStatusMsg(\"\");\r\n  } catch (error) {\r\n    console.error(\"Failed to load bookings:\", error);\r\n    setStatusType(\"error\");\r\n    setStatusMsg(error.response?.data?.message || \"Failed to load bookings.\");\r\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n      logout();\r\n      navigate(\"/login\");\r\n    }\r\n  } finally {\r\n    setIsLoadingBookings(false);\r\n  }\r\n}, [user, loadingAuth, logout, navigate, time24hrToIso]);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}