{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ecah1\\\\meeting-room-booking\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loadingAuth, setLoadingAuth] = useState(true); // Tracks if initial auth check is ongoing\n  const navigate = useNavigate(); // Get navigate from React Router\n\n  const API_URL = process.env.REACT_APP_API_URL;\n\n  // Function to load user from localStorage\n  const loadUserFromLocalStorage = useCallback(() => {\n    try {\n      const storedEmail = localStorage.getItem('userEmail');\n      const storedName = localStorage.getItem('userName');\n      const storedRole = localStorage.getItem('userRole');\n      const authToken = localStorage.getItem('authToken'); // Assuming you store a token\n\n      if (authToken && storedEmail && storedName && storedRole) {\n        // Optionally, you might want to validate the token with your backend here\n        // For simplicity, we'll assume a token means valid session for now\n        setUser({\n          email: storedEmail,\n          name: storedName,\n          role: storedRole\n        });\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"Failed to load user from local storage:\", error);\n      setUser(null);\n    } finally {\n      setLoadingAuth(false);\n    }\n  }, []);\n  useEffect(() => {\n    loadUserFromLocalStorage();\n  }, [loadUserFromLocalStorage]); // Run once on mount\n\n  // Login function to be exposed\n  const login = useCallback(async (identifier, password, rememberMe) => {\n    try {\n      const res = await axios.post(`${API_URL}/api/auth/login`, {\n        identifier,\n        password\n      });\n      const {\n        name,\n        email,\n        role,\n        token\n      } = res.data; // Assuming your backend sends a token\n\n      if (!email || !name || !role || !token) {\n        throw new Error(\"Incomplete user data or token returned from backend.\");\n      }\n\n      // Store user data in context\n      setUser({\n        name,\n        email,\n        role\n      });\n      // Store token (essential for authenticated requests)\n      localStorage.setItem(\"authToken\", token);\n      localStorage.setItem(\"userEmail\", email);\n      localStorage.setItem(\"userName\", name);\n      localStorage.setItem(\"userRole\", role);\n\n      // Save credentials if \"Remember Me\" is checked\n      if (rememberMe) {\n        localStorage.setItem(\"rememberedIdentifier\", identifier);\n        localStorage.setItem(\"rememberedPassword\", password);\n      } else {\n        // Clear saved credentials if \"Remember Me\" is unchecked\n        localStorage.removeItem(\"rememberedIdentifier\");\n        localStorage.removeItem(\"rememberedPassword\");\n      }\n\n      // Redirect based on role within the AuthContext\n      if (role === \"admin\") {\n        navigate(\"/dashboard-admin\");\n      } else {\n        navigate(\"/dashboard-user\");\n      }\n      return true; // Indicate successful login\n    } catch (err) {\n      console.error(\"Login failed:\", err);\n      setUser(null); // Clear user on failed login\n      localStorage.clear(); // Clear all auth-related storage\n      throw err; // Re-throw for component to catch and display error\n    }\n  }, [API_URL, navigate]); // Dependencies for useCallback\n\n  // Logout function to be exposed\n  const logout = useCallback(() => {\n    setUser(null);\n    localStorage.clear(); // Clear all user-related data including token\n    navigate(\"/login\"); // Redirect to login page\n  }, [navigate]); // Dependencies for useCallback\n\n  const authContextValue = {\n    user,\n    loadingAuth,\n    login,\n    // Expose the login function\n    logout // Expose the logout function\n    // If you need direct setUser, you can expose it too:\n    // setUser,\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"zIZ1aLJMxEC9cHF4rXGfAVfd+CE=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loadingAuth","setLoadingAuth","navigate","API_URL","process","env","REACT_APP_API_URL","loadUserFromLocalStorage","storedEmail","localStorage","getItem","storedName","storedRole","authToken","email","name","role","error","console","login","identifier","password","rememberMe","res","post","token","data","Error","setItem","removeItem","err","clear","logout","authContextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","$RefreshReg$"],"sources":["C:/Users/ecah1/meeting-room-booking/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate here\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loadingAuth, setLoadingAuth] = useState(true); // Tracks if initial auth check is ongoing\r\n  const navigate = useNavigate(); // Get navigate from React Router\r\n\r\n  const API_URL = process.env.REACT_APP_API_URL;\r\n\r\n  // Function to load user from localStorage\r\n  const loadUserFromLocalStorage = useCallback(() => {\r\n    try {\r\n      const storedEmail = localStorage.getItem('userEmail');\r\n      const storedName = localStorage.getItem('userName');\r\n      const storedRole = localStorage.getItem('userRole');\r\n      const authToken = localStorage.getItem('authToken'); // Assuming you store a token\r\n\r\n      if (authToken && storedEmail && storedName && storedRole) {\r\n        // Optionally, you might want to validate the token with your backend here\r\n        // For simplicity, we'll assume a token means valid session for now\r\n        setUser({ email: storedEmail, name: storedName, role: storedRole });\r\n      } else {\r\n        setUser(null);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to load user from local storage:\", error);\r\n      setUser(null);\r\n    } finally {\r\n      setLoadingAuth(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadUserFromLocalStorage();\r\n  }, [loadUserFromLocalStorage]); // Run once on mount\r\n\r\n  // Login function to be exposed\r\n  const login = useCallback(async (identifier, password, rememberMe) => {\r\n    try {\r\n      const res = await axios.post(`${API_URL}/api/auth/login`, {\r\n        identifier,\r\n        password,\r\n      });\r\n\r\n      const { name, email, role, token } = res.data; // Assuming your backend sends a token\r\n\r\n      if (!email || !name || !role || !token) {\r\n        throw new Error(\"Incomplete user data or token returned from backend.\");\r\n      }\r\n\r\n      // Store user data in context\r\n      setUser({ name, email, role });\r\n      // Store token (essential for authenticated requests)\r\n      localStorage.setItem(\"authToken\", token);\r\n      localStorage.setItem(\"userEmail\", email);\r\n      localStorage.setItem(\"userName\", name);\r\n      localStorage.setItem(\"userRole\", role);\r\n\r\n      // Save credentials if \"Remember Me\" is checked\r\n      if (rememberMe) {\r\n        localStorage.setItem(\"rememberedIdentifier\", identifier);\r\n        localStorage.setItem(\"rememberedPassword\", password);\r\n      } else {\r\n        // Clear saved credentials if \"Remember Me\" is unchecked\r\n        localStorage.removeItem(\"rememberedIdentifier\");\r\n        localStorage.removeItem(\"rememberedPassword\");\r\n      }\r\n\r\n      // Redirect based on role within the AuthContext\r\n      if (role === \"admin\") {\r\n        navigate(\"/dashboard-admin\");\r\n      } else {\r\n        navigate(\"/dashboard-user\");\r\n      }\r\n      return true; // Indicate successful login\r\n    } catch (err) {\r\n      console.error(\"Login failed:\", err);\r\n      setUser(null); // Clear user on failed login\r\n      localStorage.clear(); // Clear all auth-related storage\r\n      throw err; // Re-throw for component to catch and display error\r\n    }\r\n  }, [API_URL, navigate]); // Dependencies for useCallback\r\n\r\n  // Logout function to be exposed\r\n  const logout = useCallback(() => {\r\n    setUser(null);\r\n    localStorage.clear(); // Clear all user-related data including token\r\n    navigate(\"/login\"); // Redirect to login page\r\n  }, [navigate]); // Dependencies for useCallback\r\n\r\n  const authContextValue = {\r\n    user,\r\n    loadingAuth,\r\n    login, // Expose the login function\r\n    logout, // Expose the logout function\r\n    // If you need direct setUser, you can expose it too:\r\n    // setUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}